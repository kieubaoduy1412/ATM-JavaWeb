/*
 * 
 * */

package dnb.atm.dao.impl;

import java.sql.SQLException;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Connection;

import dnb.atm.dao.WelcomeDao;

@Component
public class WelcomeDaoImpl implements WelcomeDao {

	@Autowired
	private DataSource dataSource;

	@Autowired
	private DataSourceTransactionManager transaction;

	@Autowired
	private JdbcTemplate jdbcTemplate;

	// create an log4j instance - loc
	// private static final Logger logger =
	// Logger.getLogger(WelcomeDaoImpl.class);

	public void setDatasource(DataSource datasource) {
		this.dataSource = datasource;
	}

	/**
	 * getMoney
	 * 
	 * @param accountId
	 *            String
	 * @param amount
	 *            int
	 * @return int
	 * @author duybk.sp
	 **/
	public int getMoney(String accountId, int amount) {
		String sql = "UPDATE account SET Balance = Balance - ? WHERE AccountId = ?";
		getMoneyTransactionDetail(accountId, amount);
		return this.jdbcTemplate.update(sql, new Object[]{amount,accountId});
	}
	
	/**
	 * sendMoney
	 * 
	 * @param senderID
	 *            String
	 * @param amount
	 *            int
	 * @param receiver
	 *            String
	 * @return int
	 * @author lochl.cz
	 **/
	@Transactional("transaction")
	public int sendMoney(String senderID, int amount, String receiver) {
		String sql_minus = "UPDATE account SET Balance = Balance - ? WHERE AccountId = ?";
		String sql_add = "UPDATE account SET Balance = Balance + ? WHERE AccountId = ?";
		int result_minus = this.jdbcTemplate.update(sql_minus, new Object[] { amount, senderID });
		int result_add = this.jdbcTemplate.update(sql_add, new Object[] { amount, receiver });
		return (result_minus == 1 && result_add == 1) ? 2 : -1;
	}

	/**
	 * isEnoughMoney
	 * 
	 * @param accountId
	 *            String
	 * @param amount
	 *            int
	 * @return boolean
	 * @author lochl.cz
	 **/
	public boolean isEnoughMoney(String accountId, int amount) {
		String sql = "SELECT AccountId FROM account WHERE AccountId = ? AND	Balance > ? LIMIT 1";
		String accountID = null;
		try {
			accountID = this.jdbcTemplate.queryForObject(sql, new Object[] { accountId, amount }, String.class);
			if (accountID.length() > 0) {
				return true;
			}
		} catch (EmptyResultDataAccessException e) {
			return false;
		}
		return false;
	}

	/**
	 * isAccountExist
	 * 
	 * @param receiverID
	 *            String
	 * @return boolean
	 * @author lochl.cz
	 **/
	public boolean isAccountExist(String receiverID) {
		String sql = "SELECT AccountId FROM account WHERE AccountId = ? LIMIT 1;";
		String receiver = null;
		try {
			receiver = this.jdbcTemplate.queryForObject(sql, new Object[] { receiverID }, String.class);
			if (receiver.length() > 0) {
				return true;
			}
		} catch (EmptyResultDataAccessException e) {
			return false;
		}
		return false;
	}

	public int addMoney(String accountId, int amount) {
		String sql_add = "UPDATE account SET Balance = Balance + ? WHERE AccountId = ?";
		Connection con = null;
		try {
			con = dataSource.getConnection();
			PreparedStatement ps_add = con.prepareStatement(sql_add);
			ps_add.setInt(1, amount);
			ps_add.setString(2, accountId);
			int result = ps_add.executeUpdate();
			return result; // success
		} catch (SQLException e) {
			throw new RuntimeException();
		} finally {
			if (con != null) {
				try {
					con.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * storeTransactionDetail
	 * 
	 * @param senderId
	 *            String
	 * @param amount
	 *            int
	 * @param receiver
	 *            String
	 * @author lochl.cz
	 **/
	public void storeTransactionDetail(String senderId, int amount, String receiver) {
		String sql = "INSERT INTO transactiondetail (Time, AccountId, Description) VALUES (now(),?,?)";
		String description = "send " + amount + " from " + senderId + " to " + receiver;
		this.jdbcTemplate.update(sql, new Object[] { senderId, description });
	}
	
	/**
	 * storeTransactionDetail
	 * 
	 * @param senderId
	 *            String
	 * @param amount
	 *            int
	 * @param receiver
	 *            String
	 * @author duybk.sp
	 **/
	public void getMoneyTransactionDetail(String accountID, int amount) {
		String sql = "INSERT INTO transactiondetail (Time, AccountId, Description) VALUES (now(),?,?)";
		String description =  accountID + " has get " + amount;
		jdbcTemplate.update(sql, new Object[]{accountID,description});
	}

}
