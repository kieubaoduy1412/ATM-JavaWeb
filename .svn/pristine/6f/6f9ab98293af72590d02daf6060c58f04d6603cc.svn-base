package dnb.atm.controller;

import java.io.IOException;
import java.net.ConnectException;
import java.text.DecimalFormat;

import javax.servlet.http.HttpSession;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;
import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import dnb.atm.model.CustomerModel;
import dnb.atm.model.TransactionModel;
import dnb.atm.service.WelcomeService;
import dnb.atm.utils.CommonFuntion;
import dnb.atm.utils.Constants;

@Controller
public class WelcomeController {

	@Autowired
	private WelcomeService welcomeService;
	private static final Logger logger = LogManager.getLogger(WelcomeController.class);

	/**
	 * get Money
	 * 
	 * @param amount
	 *            String
	 * @param session
	 *            HttpSession
	 * @return String
	 * @author duybk.sp
	 **/
	@RequestMapping(Constants.GET_MONEY)
	public String getMoney(@RequestParam("amount") final int amount, HttpSession session, ModelMap model) {	
		CustomerModel obj = (CustomerModel) session.getAttribute(Constants.SESSION_ACOUNT_ID);
		obj = welcomeService.getMoney(obj, amount);
		String message = Constants.SYSTEM_FAIL;
		String page = Constants.GET_MONEY_PAGE;
		TransactionModel transactionModel = new TransactionModel();
		if (obj.isFlagTransaction() && obj.getBalance() > 0) {
			model.addAttribute("ObjForGetMoney", obj);
			transactionModel.setMessageTransaction(Constants.SUCCESS_MSG);
			transactionModel.setCurrentPage("gotoGetMoney");
			DecimalFormat myFormatter = new DecimalFormat("#,###");
			String output = myFormatter.format(amount);
			
			transactionModel.setDescriptionTransaction("You got " + output + " VND from your account ");
			message = Constants.SUCCESS_MSG;
			page = Constants.SUCCESS;
		} else {
			transactionModel.setMessageTransaction(Constants.NOT_ENOUGH_MONEY);
			System.out.println("Message Transaction: " + transactionModel.getMessageTransaction());
		}
		model.addAttribute(Constants.TRANSACTION_MODEL, transactionModel);
		model.addAttribute(Constants.MESSAGE, message);
		return page;
	}

	/**
	 * sendMoney
	 * 
	 * @param receiverId
	 *            String
	 * @param amount
	 *            int
	 * @return String
	 * @author lochl.cz
	 * @throws ConnectException
	 **/
	@ResponseBody
	@RequestMapping(Constants.SEND_MONEY)
	public String sendMoney(@RequestParam("receiverId") String receiverId, @RequestParam("amount") int amount,
			HttpSession session, ModelMap modelmap) throws ConnectException {
		String result = Constants.LOGIN;
		JSONObject json = new JSONObject();
		if (!CommonFuntion.isEmpty(session.getAttribute(Constants.SESSION_ACOUNT_ID))) {
			CustomerModel sender = (CustomerModel) session.getAttribute(Constants.SESSION_ACOUNT_ID);
			TransactionModel transactionModel = welcomeService.sendMoney(sender.getAccountID(), amount, receiverId);
			session.setAttribute(Constants.SESSION_TRANSACTION_MODEL, transactionModel);
			if (transactionModel.getMessageTransaction().trim().indexOf(Constants.SUCCESS) > 1) {
				result = gotoSuccessPAge(session, modelmap);
			} else {
				json.put(Constants.TRANSACTION_MODEL, transactionModel);
				result = this.parseToJsonString(json);
			}
			logger.info("Send " + amount + " from " + sender.getAccountID() + " to " + receiverId + ": "
					+ transactionModel.getMessageTransaction());
		}
		return result;
	}

	/**
	 * Confirm Send Money
	 * 
	 * @param receiverId
	 *            String
	 * @return String
	 * @author lochl.cz
	 * @throws ConnectException
	 **/
	@ResponseBody
	@RequestMapping(Constants.CONFIRM_SEND_MONEY)
	public String confirmSendMoney(@RequestParam("receiverId") String receiverId,
			HttpSession session,ModelMap modelmap) throws ConnectException {
		String result = Constants.LOGIN;
		JSONObject json = new JSONObject();
		if (!CommonFuntion.isEmpty(session.getAttribute(Constants.SESSION_ACOUNT_ID))) {
			String receiverName = welcomeService.getReceiverName(receiverId);
			if(Constants.NOT_FOUND_RECEIVER != receiverName){
				json.put(Constants.RECEIVERNAME, receiverName);				
			}else{
				json.put(Constants.RECEIVERNAME, Constants.NOT_FOUND_RECEIVER);
			}
			result = this.parseToJsonString(json);
		}
		return result;
	}

	/**
	 * This action return to the Add money page
	 * 
	 * @return String
	 * @author tamvn.ax
	 */
	@RequestMapping(Constants.LINK_ADD_MONEY_PAGE)
	public String gotoAddMoneyScreen(HttpSession session) {
		if (CommonFuntion.isEmpty(session.getAttribute(Constants.SESSION_ACOUNT_ID))) {
			return Constants.LINK_LOGIN_PAGE;
		}
		return Constants.ADD_MONEY_PAGE;
	}

	/**
	 * This action perform add money to account of user
	 * 
	 * @param accountId
	 * @param amount
	 * @return String
	 * @author tamvn.ax
	 */
	@RequestMapping(Constants.ADD_MONEY)
	public String addMoney(@RequestParam("accountId") final String accountId, @RequestParam("amount") final int amount,
			HttpSession session, ModelMap model) {
		TransactionModel transactionModel = welcomeService.addMoney(accountId, amount);
		CustomerModel obj = (CustomerModel) session.getAttribute(Constants.SESSION_ACOUNT_ID);
		String page = Constants.ADD_MONEY_PAGE;
		if (!CommonFuntion.isEmpty(obj.getAccountID())) {
			model.addAttribute(Constants.TRANSACTION_MODEL, transactionModel);
			if (transactionModel.getMessageTransaction().trim().indexOf(Constants.SUCCESS) > 1) {
				page = Constants.SUCCESS;
			}
		} else {
			page = Constants.LINK_LOGIN_PAGE;
		}
		return page;
	}

	/**
	 * gotoSendMoney
	 * 
	 * @return String
	 * @author lochl.cz
	 **/
	@RequestMapping(Constants.GO_TO_SEND_MONEY_PAGE)
	public String gotoSendMoney(HttpSession session) {
		if (CommonFuntion.isEmpty(session.getAttribute(Constants.SESSION_ACOUNT_ID))) {
			return Constants.LINK_LOGIN_PAGE;
		}
		return Constants.SEND_MONEY_PAGE;
	}

	/**
	 * gotoWelcomeScreen
	 * 
	 * @return String
	 * @author duybk.sp
	 **/
	@RequestMapping(Constants.LINK_GET_MONEY_PAGE)
	public String gotoGetMoneyScreen(HttpSession session) {
		if (CommonFuntion.isEmpty(session.getAttribute(Constants.SESSION_ACOUNT_ID))) {
			return Constants.LINK_LOGIN_PAGE;
		}
		return Constants.GET_MONEY_PAGE;
	}

	/**
	 * gotoWelcomeScreen
	 * 
	 * @return String
	 * @author lochl.cz
	 **/
	@RequestMapping(Constants.GO_TO_WELCOME_PAGE)
	public String gotoWelcomeScreen(HttpSession session, ModelMap model) {
		if (CommonFuntion.isEmpty(session.getAttribute(Constants.SESSION_ACOUNT_ID))) {
			return Constants.LINK_LOGIN_PAGE;
		}
		model.addAttribute(Constants.INF_CUST, session.getAttribute(Constants.SESSION_ACOUNT_ID));
		return Constants.WELCOME;
	}

	/**
	 * cancelAction
	 * 
	 * @return String
	 * @author lochl.cz
	 **/
	@RequestMapping(Constants.CANCEL_ACTION)
	public String cancelAction(HttpSession session) {
		session.removeAttribute(Constants.SESSION_ACOUNT_ID);
		return Constants.LOGIN;
	}

	@RequestMapping(Constants.GO_TO_SUCCESS)
	public String gotoSuccessPAge(HttpSession session,ModelMap model) {
		model.addAttribute(Constants.TRANSACTION_MODEL, session.getAttribute(Constants.SESSION_TRANSACTION_MODEL));		
		return Constants.SUCCESS;
	}

	public String parseToJsonString(JSONObject js) throws ConnectException {
		String json = Constants.EMPTY;
		ObjectMapper mapper = new ObjectMapper();
		try {
			json = mapper.writeValueAsString(js);
		} catch (JsonGenerationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JsonMappingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return json;
	}
}
