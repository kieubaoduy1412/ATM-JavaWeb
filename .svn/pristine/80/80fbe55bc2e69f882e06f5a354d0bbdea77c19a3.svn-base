package dnb.atm.controller;

import javax.servlet.http.HttpSession;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import dnb.atm.model.CustomerModel;
import dnb.atm.model.TransactionModel;
import dnb.atm.service.WelcomeService;
import dnb.atm.utils.CommonFuntion;
import dnb.atm.utils.Constants;

@Controller
public class WelcomeController {

	@Autowired
	private WelcomeService welcomeService;
	private static final Logger logger = LogManager.getLogger(WelcomeController.class);

	/**
	 * get Money
	 * 
	 * @param amount
	 *            String
	 * @param session
	 *            HttpSession
	 * @return String
	 * @author duybk.sp
	 **/
	@RequestMapping(Constants.GET_MONEY)
	public String getMoney(@RequestParam("amount") final int amount, HttpSession session, ModelMap model) {
		CustomerModel obj = (CustomerModel) session.getAttribute(Constants.SESSION_ACOUNT_ID);
		obj = welcomeService.getMoney(obj, amount);
		String message = Constants.SYSTEM_FAIL;
		String page = Constants.GET_MONEY_PAGE;
		if (obj.isFlagTransaction() && obj.getBalance() > 0) {
			model.addAttribute("ObjForGetMoney", obj);
			message = Constants.SUCCESS;
			page = Constants.SUCCESS;
		} else {
			message = Constants.NOT_ENOUGH_MONEY;
		}
		model.addAttribute(Constants.MESSAGE, message);
		return page;
	}

	/**
	 * sendMoney
	 * 
	 * @param receiverId
	 *            String
	 * @param amount
	 *            int
	 * @return String
	 * @author lochl.cz
	 **/
	@RequestMapping(Constants.SEND_MONEY)
	public String sendMoney(@RequestParam("receiverId") String receiverId, @RequestParam("amount") int amount,
			HttpSession session, ModelMap modelmap) {
		//TransactionModel transactionModel = new TransactionModel();
		//transactionModel.setMessageTransaction(Constants.SYSTEM_FAIL);
		//transactionModel.setCurrentPage(Constants.SEND_MONEY_PAGE);
		String page = Constants.SEND_MONEY_PAGE;
		if (!CommonFuntion.isEmpty(session.getAttribute(Constants.SESSION_ACOUNT_ID))) {
			CustomerModel sender = (CustomerModel) session.getAttribute(Constants.SESSION_ACOUNT_ID);
			TransactionModel transactionModel = welcomeService.sendMoney(sender.getAccountID(), amount, receiverId);
			//modelmap.addAttribute(Constants.TRANSACTION_MODEL, transactionModel);
			//modelmap.addAttribute(Constants.CUSTOMER_MODEL, sender);
			//if (transactionModel.getMessageTransaction().equals(Constants.SUCCESS)) {
			if (transactionModel.getMessageTransaction().trim().indexOf(Constants.SUCCESS) > 1) {
				//transactionModel.setCurrentPage(Constants.SUCCESS);
				modelmap.addAttribute(Constants.TRANSACTION_MODEL, transactionModel);
				modelmap.addAttribute(Constants.CUSTOMER_MODEL, sender);
				page = Constants.SUCCESS;
			}
			logger.info("Send " + amount + " from " + sender.getAccountID() + " to " + transactionModel.getReceiverID()
					+ ": " + transactionModel.getMessageTransaction());
		} else {
			//transactionModel.setCurrentPage(Constants.LOGIN);
			page = Constants.LOGIN;
		}
		//return transactionModel.getCurrentPage();
		return page;
	}

	/**
	 * This action return to the Add money page
	 * 
	 * @return String
	 * @author tamvn.ax
	 */
	@RequestMapping(Constants.LINK_ADD_MONEY_PAGE)
	public String gotoAddMoneyScreen() {
		return Constants.ADD_MONEY_PAGE;
	}

	/**
	 * This action perform add money to account of user
	 * 
	 * @param accountId
	 * @param amount
	 * @return String
	 * @author tamvn.ax
	 */
	@RequestMapping(Constants.ADD_MONEY)
	public String addMoney(@RequestParam("accountId") final String accountId, @RequestParam("amount") final int amount,
			HttpSession session, ModelMap model) {
		CustomerModel obj = (CustomerModel) session.getAttribute(Constants.SESSION_ACOUNT_ID);
		String page = Constants.ADD_MONEY_PAGE;

		if (!CommonFuntion.isEmpty(obj.getAccountID())) {
			TransactionModel transactionModel = new TransactionModel();
			transactionModel = welcomeService.addMoney(accountId, amount);

			if (transactionModel.getMessageTransaction().trim().indexOf("success") > 1) {
				model.addAttribute("objToView", transactionModel);
				page = Constants.SUCCESS;
			}
		} else {
			page = Constants.LINK_LOGIN_PAGE;
		}

		return page;
	}

	/**
	 * gotoSendMoney
	 * 
	 * @return String
	 * @author lochl.cz
	 **/
	@RequestMapping("/gotoSendMoney")
	public String gotoSendMoney() {
		return "sendMoney";
	}

	/**
	 * gotoWelcomeScreen
	 * 
	 * @return String
	 * @author duybk.sp
	 **/
	@RequestMapping(Constants.LINK_GET_MONEY_PAGE)
	public String gotoGetMoneyScreen() {
		return Constants.GET_MONEY_PAGE;
	}

	/**
	 * gotoWelcomeScreen
	 * 
	 * @return String
	 * @author lochl.cz
	 **/
	@RequestMapping("/gotoWelcomePage")
	public String gotoWelcomeScreen() {
		return "welcome";
	}

	/**
	 * cancelAction
	 * 
	 * @return String
	 * @author lochl.cz
	 **/
	@RequestMapping("/cancelAction")
	public String cancelAction(HttpSession session) {
		session.removeAttribute("SESSION_ACID");
		return "../../index";
	}
}
